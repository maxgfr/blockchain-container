/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.magma.max


/**
 * The status of a shipment
 */
enum ShipmentStatus {
  o CREATED
  o IN_TRANSIT
  o ARRIVED
}

/**
 * An abstract transaction that is related to a Shipment
 */
abstract transaction ShipmentTransaction {
  --> Shipment shipment
}

/**
 * Actualisation of the position of the shipment
 */
transaction PositionReading extends ShipmentTransaction {
  o Long pos_x
  o Long pos_y
}

/**
 * A notification that a shipment has been received by the site
 */
transaction ShipmentReceived extends ShipmentTransaction {
}

/**
 * A shipment being tracked as an asset on the ledger
 */
asset Shipment identified by shipmentId {
  o String shipmentId
  o ShipmentStatus status
  o Double nbcontainer
  o PositionReading[] positionReadings optional
  --> Contract contract
}

/**
 * Defines a contract between a Responsible and an Container to ship using
 * a Owner, paying a set unit price. The unit price is multiplied by
 * a penality factor proportional to the deviation from the min and max
 * negociated temperatures for the shipment.
 */
asset Contract identified by contractId {
  o String contractId
  --> Responsible responsible
  --> Owner owner
  --> Site site
  o DateTime arrivalDateTime
  o Double unitPrice
}

/**
 * A concept for a simple street address
 */
concept Address {
  o String city optional
  o String country
  o String street optional
  o String zip optional
}

/**
 * An abstract participant type in this business network
 */
abstract participant Business identified by email {
  o String email
  o Address address
  o Double accountBalance
}

/**
 * A Responsible is a type of participant in the network
 */
participant Responsible extends Business {
}

/**
 * A Owner is a type of participant in the network
 */
participant Owner extends Business {
}

/**
 * An Site is a type of participant in the network
 */
participant Site extends Business {
}

/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}

/**
 * Event to say that the container was received
 */
event isReceived {
  --> Contract asset
  o DateTime arrivalDateTime
}
